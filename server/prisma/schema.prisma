datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Version Management

model Branch {
  id               Int         @id @default(autoincrement())
  // 作成者
  creator          User        @relation(fields: [creatorId], references: [id])
  creatorId        Int         @map("creator_id")
  // オリジナルブランチ
  rootBranch       Branch?     @relation("BranchTree", fields: [rootBranchId], references: [id])
  rootBranchId     Int?        @unique @map("root_branch_id")
  // 世代: 1,2,3...
  generation       Int         @default(1)
  // フォーク元リリース
  baseRelease      Release?    @relation("Fork", fields: [baseReleaseId], references: [id])
  baseReleaseId    Int?        @map("base_release_id")

  books            Book[]
  releases         Release[]
  childBranches    Branch[]    @relation("BranchTree")
  @@map("branches")
}

model Release {
  id               Int         @id @default(autoincrement())
  branch           Branch      @relation(fields: [branchId], references: [id])
  branchId         Int         @map("branch_id")
  version          String      @default("")
  releasedAt       DateTime?   @default(now()) @map("released_at")
  comment          String      @default("")
  book             Book?

  folkedBranches   Branch[]    @relation("Fork")
  @@map("releases")
}


// Resource Objects

/// Zoomインポート履歴
model ZoomMeeting {
  uuid       String   @id
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId Int      @unique @map("resource_id")

  @@map("zoom_meetings")
}

/// 教育用外部リソース
model Resource {
  id          Int          @id @default(autoincrement())
  topics      Topic[]
  zoomMeeting ZoomMeeting?
  video       Video?       @relation(fields: [videoId], references: [id])
  videoId     Int?         @unique @map("video_id")
  /// 外部リソースのアドレス
  url         String       @unique
  /// 詳細
  details     Json

  @@map("resources")
}

/// ビデオ
model Video {
  id          Int       @id @default(autoincrement())
  resource    Resource?
  tracks      Track[]
  /// 動画プロバイダーの識別子
  providerUrl String?   @map("provider_url")

  @@map("videos")
}

/// ビデオのトラック (字幕・キャプション)
model Track {
  id       Int    @id @default(autoincrement())
  video    Video  @relation(fields: [videoId], references: [id])
  videoId  Int    @map("video_id")
  /// 種別 "subtitles": 字幕
  kind     String @default("subtitles")
  /// 言語 ISO 639-1 code
  language String
  /// WebVTT ファイルの実体
  content  String

  @@map("tracks")
}

// Topic Objects

/// トピック
model Topic {
  id           Int            @id @default(autoincrement())
  resource     Resource       @relation(fields: [resourceId], references: [id])
  resourceId   Int            @map("resource_id")
  keywords     Keyword[]
  topicSection TopicSection[]
  activities   Activity[]
  /// トピック名称
  name         String
  /// 説明 (Markdown)
  description  String
  /// 言語 ISO 639-1 code
  language     String         @default("ja")
  /// 学習所要時間 (秒)
  timeRequired Int            @map("time_required")
  /// 再生開始時間 (秒)
  startTime    Float?         @map("start_time")
  /// 再生終了時間 (秒, 0 は無効)
  stopTime     Float?         @map("stop_time")
  /// 共有可否 (true: シェアする, それ以外: シェアしない)
  shared       Boolean        @default(true)
  /// 著作者
  authors      Authorship[]
  /// ライセンス (https://spdx.org/licenses/ に準拠するもの, "" は無効)
  license      String         @default("")
  /// 作成日
  createdAt    DateTime       @default(now()) @map("created_at")
  /// 更新日
  updatedAt    DateTime       @default(now()) @map("updated_at")
  /// 詳細
  details      Json

  @@map("topics")
}

/// キーワード
model Keyword {
  id     Int     @id @default(autoincrement())
  topics Topic[]
  books  Book[]
  /// 名称
  name   String  @unique

  @@map("keywords")
}

// Map Objects/Learning Contents

/// LTI Platform
model LtiPlatform {
  /// OpenID Connect Issuer ID
  issuer   String        @id
  /// OpenID Connect Issuer Metadata: creatorization_endpoint, jwks_uri, token_endpoint etc.
  metadata Json
  /// OpenID Connect Clients
  clients  LtiConsumer[]

  @@map("lti_platform")
}

/// LTI Consumer
model LtiConsumer {
  ltiContext       LtiContext[]
  ltiResourceLinks LtiResourceLink[]
  users            User[]
  /// OAuth Consumer key ("" は無効)
  id               String            @id
  /// OAuth Consumer secret (LTI v1.1 の場合: "" は無効)
  secret           String            @default("")
  /// LTI Platform (LTI v1.3 の場合: 必須)
  platform         LtiPlatform?      @relation(fields: [platformId], references: [issuer])
  platformId       String?           @map("platform_id")
  /// Access Token ("" は無効)
  accessToken      String            @default("") @map("access_token")

  @@map("lti_consumer")
}

/// LTI Context
model LtiContext {
  consumer      LtiConsumer       @relation(fields: [consumerId], references: [id])
  consumerId    String            @map("consumer_id")
  /// LTI Context ID ("" はすべてのコース)
  id            String
  resourceLinks LtiResourceLink[]
  members       LtiMember[]
  activities    Activity[]
  title         String
  label         String

  @@id([consumerId, id])
  @@map("lti_context")
}

/// LTI Member
model LtiMember {
  context    LtiContext @relation(fields: [consumerId, contextId], references: [consumerId, id])
  user       User       @relation(fields: [consumerId, userId], references: [ltiConsumerId, ltiUserId])
  consumerId String     @map("consumer_id")
  contextId  String     @map("context_id")
  userId     String     @map("user_id")

  @@id([consumerId, contextId, userId])
  @@map("lti_members")
}

/// LTI Resource Link
model LtiResourceLink {
  consumer   LtiConsumer @relation(fields: [consumerId], references: [id])
  consumerId String      @map("consumer_id")
  id         String
  context    LtiContext  @relation(fields: [consumerId, contextId], references: [consumerId, id])
  contextId  String      @map("context_id")
  title      String
  book       Book        @relation(fields: [bookId], references: [id])
  bookId     Int         @map("book_id")
  creator    User        @relation(fields: [creatorId], references: [id])
  creatorId  Int         @map("creator_id")
  /// 作成日
  createdAt  DateTime    @default(now()) @map("created_at")
  /// 更新日
  updatedAt  DateTime    @updatedAt @map("updated_at")


  @@id([consumerId, id])
  @@map("lti_resource_link")
}

/// ブック
model Book {
  id               Int               @id @default(autoincrement())
  keywords         Keyword[]
  sections         Section[]
  publicBooks      PublicBook[]
  ltiResourceLinks LtiResourceLink[]
  /// 題名
  name             String
  /// 説明 (Markdown)
  description      String            @default("")
  /// 言語 ISO 639-1 code
  language         String            @default("ja")
  /// 学習所要時間 (秒)
  timeRequired     Int?              @map("time_required")
  /// 共有可否 (true: シェアする, それ以外: シェアしない)
  shared           Boolean           @default(true)
  /// 著作者
  authors          Authorship[]
  /// ライセンス (https://spdx.org/licenses/ に準拠するもの, "" は無効)
  license          String            @default("")
  /// zoomミーティングid
  zoomMeetingId    BigInt?           @map("zoom_meeting_id")
  /// 公開日
  publishedAt      DateTime          @default(now()) @map("published_at")
  /// 作成日
  createdAt        DateTime          @default(now()) @map("created_at")
  /// 更新日
  updatedAt        DateTime          @default(now()) @map("updated_at")
  /// 詳細
  details          Json

  // ブックが所属するブランチ
  branch           Branch?     @relation(fields: [branchId], references: [id])
  branchId         Int?        @map("branch_id")
  // リリース
  release          Release?    @relation(fields: [releaseId], references: [id])
  releaseId        Int?        @unique @map("release_id")

  @@index([zoomMeetingId])
  @@map("books")
}

/// 公開URLブック
model PublicBook {
  id       Int       @id @default(autoincrement())
  /// ブック
  book     Book      @relation(fields: [bookId], references: [id])
  bookId   Int       @map("book_id")
  /// ユーザー
  user     User      @relation(fields: [userId], references: [id])
  userId   Int       @map("user_id")
  /// 許可ドメイン
  domains  String[]
  /// 期限日
  expireAt DateTime? @map("expire_at")
  /// アクセストークン
  token    String    @unique

  @@map("public_books")
}

/// セクション
model Section {
  id            Int            @id @default(autoincrement())
  book          Book           @relation(fields: [bookId], references: [id])
  bookId        Int            @map("book_id")
  topicSections TopicSection[]
  /// 順番 (昇順)
  order         Int
  /// 名称 (nullならば匿名のトピックの集まり)
  name          String?

  @@index([bookId], name: "book_id")
  @@map("sections")
}

/// セクション内トピック
model TopicSection {
  id        Int     @id @default(autoincrement())
  section   Section @relation(fields: [sectionId], references: [id])
  sectionId Int     @map("section_id")
  topic     Topic   @relation(fields: [topicId], references: [id])
  topicId   Int     @map("topic_id")
  /// 順番 (昇順)
  order     Int

  @@index([sectionId], name: "section_id")
  @@map("topic_sections")
}

// Actors

/// 利用者
model User {
  id               Int               @id @default(autoincrement())
  editableContents Authorship[]
  ltiResourceLinks LtiResourceLink[]
  ltiMembers       LtiMember[]
  ltiConsumer      LtiConsumer       @relation(fields: [ltiConsumerId], references: [id])
  ltiConsumerId    String            @map("lti_consumer_id")
  ltiUserId        String            @map("lti_user_id")
  activities       Activity[]
  publicBooks      PublicBook[]
  /// 氏名
  name             String
  /// メールアドレス ("" は無効値)
  email            String            @default("")
  /// 詳細
  settings         Json              @default("{}")

  /// 作成したブランチ
  createdBranches  Branch[]

  @@unique([ltiConsumerId, ltiUserId])
  @@index([email])
  @@map("users")
}

/// 学習活動
model Activity {
  id            Int                 @id @default(autoincrement())
  timeRanges    ActivityTimeRange[]
  topic         Topic               @relation(fields: [topicId], references: [id])
  topicId       Int                 @map("topic_id")
  learner       User                @relation(fields: [learnerId], references: [id])
  learnerId     Int                 @map("learner_id")
  ltiContext    LtiContext          @relation(fields: [ltiConsumerId, ltiContextId], references: [consumerId, id])
  ltiConsumerId String              @default("") @map("lti_consumer_id")
  ltiContextId  String              @default("") @map("lti_context_id")
  /// 合計時間 (ms)
  totalTimeMs   Int                 @map("total_time_ms")
  /// 作成日
  createdAt     DateTime            @default(now()) @map("created_at")
  /// 更新日
  updatedAt     DateTime            @default(now()) @map("updated_at")

  @@unique([topicId, learnerId, ltiConsumerId, ltiContextId])
  @@map("activities")
}

// 学習活動の時間範囲
model ActivityTimeRange {
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId Int      @map("activity_id")
  /// 開始時間 (ms)
  startMs    Int      @map("start_ms")
  /// 終了時間 (ms)
  endMs      Int      @map("end_ms")

  @@id([activityId, startMs])
  @@map("activities_time_ranges")
}

// 著作
model Authorship {
  id      Int         @id @default(autoincrement())
  user    User        @relation(fields: [userId], references: [id])
  userId  Int         @map("user_id")
  role    ContentRole @relation(fields: [roleId], references: [id])
  roleId  Int         @map("role_id")
  topic   Topic?      @relation(fields: [topicId], references: [id])
  topicId Int?        @map("topic_id")
  book    Book?       @relation(fields: [bookId], references: [id])
  bookId  Int?        @map("book_id")

  @@map("authorships")
}

// コンテンツでの役割
model ContentRole {
  id          Int          @id @default(autoincrement())
  /// 役割の名前
  roleName    String       @map("role_name")
  /// 著作
  authorships Authorship[]

  @@map("content_roles")
}

// Etc.

/// セッションストア
model Session {
  id        String   @id
  sid       String   @unique @default(cuid())
  data      String
  expiresAt DateTime @map("expires_at")

  @@map("sessions")
}

/// OAuth Account
model Account {
  id        Int    @id @default(autoincrement())
  nonce     String
  timestamp Int

  @@unique([nonce, timestamp])
  @@map("accounts")
}
